# This example isn't complete because of the limited resources of the ESP8266. Adding
# all registers would trigger an out of memory exception (OOM). Take a look at the
# esp32-example.yaml and extend this configuration gradually if you miss something.

substitutions:
  name: pace-bms
  device_description: "Monitor and control a PACE BMS via RS485 (Modbus)"
  tx_pin: GPIO4
  rx_pin: GPIO5
  flow_control_pin: GPIO12

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.6.0
  project:
    name: "syssi.esphome-pace-bms"
    version: 2.0.0

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  platform: esphome

logger:
  level: DEBUG

# If you use Home Assistant please remove this `mqtt` section and uncomment the `api` component!
# The native API has many advantages over MQTT: https://esphome.io/components/api.html#advantages-over-mqtt
mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: mqtt_client

# api:

uart:
  - id: uart_0
    baud_rate: 9600
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}
    debug:
      direction: BOTH
      dummy_receiver: false

modbus:
  - id: modbus0
    uart_id: uart_0
    flow_control_pin: ${flow_control_pin}
    send_wait_time: 200ms

modbus_controller:
  - id: bms0
    # Slave address 0x01
    address: 0x01
    modbus_id: modbus0
    command_throttle: 200ms
    update_interval: 10s

binary_sensor:
  #  11  Status/Fault flag                     2 byte   R  uint16  Hex See ^3
  #      Bit 8: Status: Charging operation
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} charging operation"
    address: 11
    register_type: holding
    bitmask: 0x0100

  #      Bit 9: Status: Discharging operation
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} discharging operation"
    address: 11
    register_type: holding
    bitmask: 0x0200

  #      Bit 10: Status: Charging enabled/disabled
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} charging"
    address: 11
    register_type: holding
    bitmask: 0x0400

  #      Bit 11: Status: Discharging enabled/disabled
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} discharging"
    address: 11
    register_type: holding
    bitmask: 0x0800

sensor:
  #   0  Current                               2 byte   R   int16  10mA (Positive: chargingm Negative: discharging)
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} current"
    address: 0
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  #   1  Voltage of pack                       2 byte   R  uint16  10mV
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} total voltage"
    address: 1
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} power"
    address: 0
    register_type: holding
    value_type: U_WORD
    register_count: 2
    response_size: 4
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      if (data.size() < 4) {
        return NAN;
      }
      float current = (int16_t)(data[0] << 8 | data[1] << 0);
      float total_voltage = (uint16_t)(data[2] << 8 | data[3] << 0);
      return current * total_voltage * 0.0001f;

  #   2  State of charge                       2 byte   R   uint8  % (0-100%)
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} state of charge"
    address: 2
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  #   3  SOH                                   2 byte   R   uint8  % (0-100%)
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} state of health"
    address: 3
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: measurement
    accuracy_decimals: 0

text_sensor:
  #   9  Warning flag                          2 byte   R  uint16  Hex See ^1
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} warnings"
    address: 9
    register_type: holding
    register_count: 1
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t WARNINGS_SIZE = 16;
      static const char *const WARNINGS[WARNINGS_SIZE] = {
          "Cell overvoltage",              // 0000 0000 0000 0001 (1)
          "Cell undervoltage",             // 0000 0000 0000 0010 (2)
          "Pack overvoltage",              // 0000 0000 0000 0100 (3)
          "Pack undervoltage",             // 0000 0000 0000 1000 (4)
          "Charging overcurrent",          // 0000 0000 0001 0000 (5)
          "Discharging overcurrent",       // 0000 0000 0010 0000 (6)
          "Reserve (Bit 7)",               // 0000 0000 0100 0000 (7)
          "Reserve (Bit 8)",               // 0000 0000 1000 0000 (8)
          "Charging overtemperature",      // 0000 0001 0000 0000 (9)
          "Discharging overtemperature",   // 0000 0010 0000 0000 (10)
          "Charging undertemperature",     // 0000 0100 0000 0000 (11)
          "Discharging undertemperature",  // 0000 1000 0000 0000 (12)
          "Environment overtemperature",   // 0001 0000 0000 0000 (13)
          "Environment undertemperature",  // 0010 0000 0000 0000 (14)
          "MOSFET overtemperature",        // 0100 0000 0000 0000 (15)
          "Low state of charge",           // 1000 0000 0000 0000 (16)
      };
      std::string values = "";

      uint16_t mask = modbus_controller::word_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < WARNINGS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(WARNINGS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  #  10  Protection flag                       2 byte   R  uint16  Hex See ^2
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} protections"
    address: 10
    register_type: holding
    register_count: 1
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t PROTECTIONS_SIZE = 16;
      static const char *const PROTECTIONS[PROTECTIONS_SIZE] = {
          "Cell overvoltage",              // 0000 0000 0000 0001 (1)
          "Cell undervoltage",             // 0000 0000 0000 0010 (2)
          "Pack overvoltage",              // 0000 0000 0000 0100 (3)
          "Pack undervoltage",             // 0000 0000 0000 1000 (4)
          "Charging overcurrent",          // 0000 0000 0001 0000 (5)
          "Discharging overcurrent",       // 0000 0000 0010 0000 (6)
          "Short circuit",                 // 0000 0000 0100 0000 (7)
          "Charging overvoltage",          // 0000 0000 1000 0000 (8)
          "Charging overtemperature",      // 0000 0001 0000 0000 (9)
          "Discharging overtemperature",   // 0000 0010 0000 0000 (10)
          "Charging undertemperature",     // 0000 0100 0000 0000 (11)
          "Discharging undertemperature",  // 0000 1000 0000 0000 (12)
          "MOSFET overtemperature",        // 0001 0000 0000 0000 (13)
          "Environment overtemperature",   // 0010 0000 0000 0000 (14)
          "Environment undertemperature",  // 0100 0000 0000 0000 (15)
          "Reserve (Bit 16)",              // 1000 0000 0000 0000 (16)
      };
      std::string values = "";

      uint16_t mask = modbus_controller::word_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < PROTECTIONS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(PROTECTIONS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  #  11  Status/Fault flag                     2 byte   R  uint16  Hex See ^3
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} faults"
    address: 11
    register_type: holding
    register_count: 1
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t FAULTS_SIZE = 8;
      static const char *const FAULTS[FAULTS_SIZE] = {
          "Charging MOSFET fault",                   // 0000 0000 0000 0001 (1)
          "Discharging MOSFET fault",                // 0000 0000 0000 0010 (2)
          "Temperature sensor",                      // 0000 0000 0000 0100 (3)
          "Reserve (Bit 4)",                         // 0000 0000 0000 1000 (4)
          "Battery cell fault",                      // 0000 0000 0001 0000 (5)
          "Front end sampling communication fault",  // 0000 0000 0010 0000 (6)
          "Reserve (Bit 7)",                         // 0000 0000 0100 0000 (7)
          "Reserve (Bit 8)",                         // 0000 0000 1000 0000 (8)
      };
      std::string values = "";

      uint16_t mask = modbus_controller::word_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < FAULTS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(FAULTS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  #  11  Status/Fault flag                     2 byte   R  uint16  Hex See ^3
  - platform: modbus_controller
    modbus_controller_id: bms0
    name: "${name} status"
    address: 11
    register_type: holding
    register_count: 1
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t STATUS_SIZE = 8;
      static const char *const STATUS[STATUS_SIZE] = {
          "CHG",
          "DCHG",
          "MOSFET_CHG",
          "MOSFET_DCHG",
          "LIMIT_CHG",
          "Reserve (Bit 13)",
          "Charger inversed",
          "HEAT",
      };
      std::string values = "";

      uint16_t mask = modbus_controller::word_from_hex_str(x, 0);
      if (mask) {
        for (int i = 8; i < (STATUS_SIZE+8); i++) {
          if (mask & (1 << i)) {
            values.append(STATUS[i-8]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;
